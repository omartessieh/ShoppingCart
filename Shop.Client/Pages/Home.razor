@page "/"
@using Shop.Models.CustomModels;
@inject NavigationManager navManager;
@inject ILocalStorageService? LocalStorage;
@using Shop.Client.Services;
@inject IClientPanelService clientPanelService;
@inject ISessionStorageService sessionStorage;

<style>
    .column {
        float: left;
        padding: 15px;
    }

    .clearfix::after {
        content: "";
        clear: both;
        display: table;
    }

    .menu {
        width: 25%;
        margin-top: 10px;
        border: 1px outset #808080;
        border-radius: 7px;
        background: linear-gradient(-10deg, #ffd800, #808080, #23a6d5, #f5f542);
        color: black;
    }

    .content {
        width: 75%;
    }

    .menu ul {
        list-style-type: none;
        margin: 0;
        padding: 0;
    }

    .menu li {
        padding: 8px;
        margin-bottom: 8px;
        color: black;
        background-color: white;
        cursor: pointer;
    }

        .menu li:hover {
            background-color: #e7e4e4;
            color: #808080;
        }

    .stuff {
        padding: 8px;
        margin: 1px;
        background-color: white;
        border: 1px outset black;
    }

    .add-to-cart {
        border: 1px outset #808080;
        width: 100%;
        background-color: #b6ff00;
    }
</style>

<div style="min-height:500px;">
    <div class="column menu">
        @if (categories == null)
        {
            <span>Loading categories...</span>
        }
        else
        {
            <div style="text-align:center;">
                <h5>Shopping List</h5>
            </div>
            <ul>
                @foreach (var category in categories)
                {
                    <li @onclick="(() => LoadProductByCategory(category))">@category.Name</li>
                }
            </ul>
        }
    </div>

    <div class="column content">
        @if (products == null)
        {
            <span>Loading products...</span>
        }
        else
        {
            <div class="container">
                <div style="padding: 5px 0px 0px 0px; border-bottom: 1px ridge black; margin-bottom:5px;">
                    <h5><i><u>@categoryName</u></i></h5>
                </div>
                <div class="row">
                    @foreach (var prod in products)
                    {
                        <div class="col-md-4">
                            <div class="col-md-12 stuff">
                                <div style="width:100%; border-radius: 2px; background-color: white;">
                                    <button type="button" class="btn" style="border: 2px #cff7f9 inset; width:100%;">@prod.Name</button>
                                    <img src="@Imageslink/@prod.ImageUrl" style="width:100%; height:150px; border-radius:1px;" />

                                    <div>
                                        Price:&nbsp;$@prod.Price &nbsp;&nbsp;<span style="color:red;">Stock:&nbsp;@prod.Stock</span>
                                    </div>
                                    @if (prod.Stock > 0)
                                    {
                                        @if (prod.CartFlag)
                                        {
                                            <button type="button" class="btn add-to-cart" style="background-color:#ffd800;" @onclick="(() => AddToCart_Click(prod))">Remove From Cart</button>
                                        }
                                        else
                                        {
                                            <button type="button" class="btn add-to-cart" @onclick="(() => AddToCart_Click(prod))">Add To Cart</button>
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

@code {
    public List<CategoryModel> categories { get; set; } = new();
    public List<ProductModel> products { get; set; } = new();
    public string categoryName { get; set; } = string.Empty;
    string Imageslink { get; set; } = "https://localhost:7123/GetImages";
    public List<CartModel> myCart { get; set; } = new();
    public bool cartFlag = false;

    [CascadingParameter]
    public EventCallback notify { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetCategories();
    }

    private async Task GetCategories()
    {
        categories = await clientPanelService.GetCategories() ?? new List<CategoryModel>();

        if (categories.Any())
        {
            await LoadProductByCategory(categories.First());
        }
    }

    private async Task LoadProductByCategory(CategoryModel category)
    {
        categoryName = category.Name;
        products = await clientPanelService.GetProductByCategoryId(category.Id) ?? new List<ProductModel>();
        if (products != null && products.Count > 0)
        {
            await UpdateCartFlags();
        }
    }

    private async Task AddToCart_Click(ProductModel productClicked)
    {
        //sessionStorage
        var result = await LocalStorage.GetItemAsync<List<CartModel>>("myCart");
        myCart = result ?? new List<CartModel>();

        if (productClicked.CartFlag)
        {
            myCart.RemoveAll(x => x.ProductId == productClicked.Id);
        }
        else
        {
            if (!myCart.Any(x => x.ProductId == productClicked.Id))
            {
                myCart.Add(new CartModel
                    {
                        ProductId = productClicked.Id,
                        Quantity = 1,
                        AvailableStock = (int)productClicked.Stock,
                        ProductName = productClicked.Name,
                        ProductImage = productClicked.ImageUrl,
                        Price = (int)productClicked.Price
                    });
            }
        }

        //sessionStorage
        await LocalStorage.SetItemAsync("myCart", myCart);
        await UpdateCartFlags();
        await notify.InvokeAsync();
    }

    private async Task UpdateCartFlags()
    {
        //sessionStorage
        var result = await LocalStorage.GetItemAsync<List<CartModel>>("myCart");

        if (result != null)
        {
            myCart = result;

            foreach (var prod in products)
            {
                prod.CartFlag = myCart.Any(cart => cart.ProductId == prod.Id);
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                //sessionStorage
                var myCartItems = await LocalStorage.GetItemAsync<List<CartModel>>("myCart");
                cartFlag = myCartItems != null && myCartItems.Any();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in OnAfterRenderAsync: {ex.Message}");
            }
            finally
            {
                StateHasChanged();
            }
        }
    }
}