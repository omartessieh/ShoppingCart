@page "/Products"
@using Shop.Models.CustomModels;
@using Shop.Admin.Services;
@inject IAdminPanelService adminPanelService;

<style>
    .modal {
        position: fixed;
        z-index: 1;
        padding-top: 100px;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: hidden;
        background-color: rgba(0, 0, 0, 0.4);
        display: @((showDeletePopup || successPopup) ? "block" : "none");
    }

    .modal-content {
        background-color: #fefefe;
        margin: auto;
        padding: 20px;
        border: 1px solid #888;
        width: 50%;
        overflow: hidden;
    }

    .close {
        color: #aaaaaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: #000;
            text-decoration: none;
            cursor: pointer;
        }
</style>

@if (productModel == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card">
        <h4 class="card-header">Product</h4>
        <div class="card-body">
            <EditForm Model="@productModel" OnValidSubmit="SaveProduct">
                <DataAnnotationsValidator />
                <div class="row">
                    <div class="form-group col-3">
                        <label>Product Name :</label>
                        <InputText @bind-Value="productModel.Name" class="form-control" />
                        <ValidationMessage For="@(() => productModel.Name)" />
                    </div>
                    <div class="form-group col-3">
                        <label>Product Price :</label>
                        <InputNumber @bind-Value="productModel.Price" class="form-control" placeholder="0" />
                        <ValidationMessage For="@(() => productModel.Price)" />
                    </div>
                    <div class="form-group col-3">
                        <label>Product Stock :</label>
                        <InputNumber @bind-Value="productModel.Stock" class="form-control" placeholder="0" />
                        <ValidationMessage For="@(() => productModel.Stock)" />
                    </div>
                    <div class="form-group col-3">
                        <label>Select Category :</label>
                        @if (categoryList != null)
                        {
                            <select class="form-control" @onchange="CategoryClicked">
                                <option value="">-- Select --</option>
                                @foreach (var cat in categoryList)
                                {
                                    <option value="@cat.Id">@cat.Name</option>
                                }
                            </select>
                        }
                        <ValidationMessage For="@(() => productModel.CategoryId)" />
                    </div>
                </div>
                <div class="row" style="padding-top: 10px;">
                    <div class="form-group col-3">
                        <label>Select Photo</label>
                        <label style="border:1px ridge #808080;">
                            <InputFile OnChange="@OnInputFileChange" />
                        </label>
                        <ValidationMessage For="@(() => productModel.FileContent)" />
                        <table style="border: 1px ridge #808080">
                            <tr>
                                @foreach (var imgsrc in imageUrls)
                                {
                                    <td>
                                        <img src="@imgsrc" />
                                    </td>
                                }
                            </tr>
                        </table>
                    </div>
                </div>
                <div class="text-lg-end">
                    <input type="submit" class="btn btn-primary" value="Save" />
                    <input type="button" class="btn btn-secondary" value="Clear" @onclick="ClearForm" />
                </div>
            </EditForm>
        </div>
        <div class="card-body">
            @if (productList == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <table class="table table-striped table-bordered bg-light">
                    <thead>
                        <tr>
                            <th style="width:15px;">Sr.No</th>
                            <th>Name</th>
                            <th>Price</th>
                            <th>Stock</th>
                            <th>Category</th>
                            <th style="width:80px;">Delete?</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var (index, prod) in productList.Select((prod, i) => (i + 1, prod)))
                        {
                            <tr>
                                <td>@index</td>
                                <td>@prod.Name</td>
                                <td>@prod.Price</td>
                                <td>@prod.Stock</td>
                                <td>@prod.CategoryName</td>
                                <td><input type="button" class="btn btn-danger" value="Delete" @onclick="(() => DeleteButtonClick(prod.Id))" /></td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
}

@if (showDeletePopup)
{
    <div class="modal" style="display:block;">
        <div class="modal-content">
            <div class="modal-header">
                <h5>Delete Product</h5>
                <span class="close" @onclick="ToggleDeletePopup">&times;</span>
            </div>
            <div class="modal-body">
                Are you sure you want to delete <span style="background-color:yellow;">@productToDelete?.Name</span>?
            </div>
            <div class="modal-footer">
                <input type="button" class="btn btn-danger" value="Yes" @onclick="DeleteProduct" />
                <input type="button" class="btn btn-secondary" value="No" @onclick="ToggleDeletePopup" />
            </div>
        </div>
    </div>
}

@if (successPopup)
{
    <div class="modal" style="display:block;">
        <div class="modal-content">
            <div class="modal-header">
                Alert <span class="close" @onclick="ToggleSuccessPopup">&times;</span>
            </div>
            <div class="modal-body">
                @Message
            </div>
            <div class="modal-footer">
                <input type="button" class="btn btn-primary" value="Close" @onclick="ToggleSuccessPopup" />
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter]
    public EventCallback notify { get; set; }
    public List<CategoryModel> categoryList { get; set; }
    public ProductModel productModel { get; set; }
    public List<ProductModel> productList { get; set; }
    public int categoryId { get; set; }
    IReadOnlyList<IBrowserFile> selectedFiles;
    List<string> imageUrls = new List<string>();
    public ProductModel productToDelete { get; set; }
    public bool showDeletePopup { get; set; } = false;
    public bool successPopup { get; set; } = false;
    public string Message { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        productModel = new ProductModel();
        await GetProducts();
        await GetCategories();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await notify.InvokeAsync();
        }
    }

    private async Task GetCategories()
    {
        categoryList = await adminPanelService.GetCategories();
    }

    private async Task GetProducts()
    {
        productList = await adminPanelService.GetProducts();
    }

    private async Task SaveProduct()
    {
        if (selectedFiles != null && selectedFiles.Any())
        {
            var file = selectedFiles.First();
            var fileName = $"{Guid.NewGuid()}.png";

            using (var stream = file.OpenReadStream())
            {
                using (var ms = new MemoryStream())
                {
                    await stream.CopyToAsync(ms);
                    productModel.FileContent = ms.ToArray();
                }
            }

            productModel.ImageUrl = fileName;
        }
        else
        {
            productModel.ImageUrl = "no-image.png";
        }

        productModel.CategoryName = categoryList.Where(x => x.Id == categoryId).Select(x => x.Name).FirstOrDefault();
        productModel.CategoryId = categoryId;

        bool flag = await adminPanelService.SaveProduct(productModel) != null;
        productModel = new ProductModel();
        await GetProducts();
        ClearForm();

        Message = flag ? "Product Added Successfully!" : "Product Not Added, Try Again!";
        ToggleSuccessPopup();
    }

    private async Task DeleteProduct()
    {
        if (productToDelete != null)
        {
            bool flag = await adminPanelService.DeleteProduct(productToDelete.Id);
            ToggleDeletePopup();

            Message = flag ? "Product Deleted Successfully!" : "Product Not Deleted, Try Again!";
            ToggleSuccessPopup();
            productToDelete = null;
            await GetProducts();
        }
    }

    private void DeleteButtonClick(int id)
    {
        productToDelete = productList.FirstOrDefault(p => p.Id == id);
        ToggleDeletePopup();
    }

    private void ToggleDeletePopup()
    {
        showDeletePopup = !showDeletePopup;
    }

    private void ToggleSuccessPopup()
    {
        successPopup = !successPopup;
    }

    private void ClearForm()
    {
        productModel = new ProductModel();
        imageUrls = new List<string>();
    }

    private void CategoryClicked(ChangeEventArgs categoryEvent)
    {
        if (!string.IsNullOrEmpty(Convert.ToString(categoryEvent.Value)))
        {
            categoryId = Convert.ToInt32(categoryEvent.Value);
            productModel.CategoryId = categoryId;
            this.StateHasChanged();
        }
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        imageUrls.Clear();

        foreach (var file in selectedFiles)
        {
            var resizedImage = await file.RequestImageFileAsync("image/jpg", 100, 100);
            var buffer = new byte[resizedImage.Size];
            await resizedImage.OpenReadStream().ReadAsync(buffer);
            var imgData = $"data:image/jpg;base64,{Convert.ToBase64String(buffer)}";
            imageUrls.Add(imgData);
            productModel.ImageUrl = imgData;
        }

        Message = $"{selectedFiles.Count} file(s) selected";
        this.StateHasChanged();
    }
}
